{"version":3,"sources":["App.module.scss","components/issue.module.scss","utils/fetch-helper.js","services/issues-service.js","actions/issues-actions.js","components/issue.js","components/issues-list.js","App.js","reducers/issues-reducer.js","reducers/index.js","serviceWorker.js","index.js","utils/configureStore.js"],"names":["module","exports","container","content","stateIcon","text","title","comments","commentIcon","domain","endpoints","getIssues","_ref","method","actionKey","endpoint","concat","fetch","cache","headers","Content-Type","getResponse","GET_ISSUES_IN_PROGRESS","GET_ISSUES_SUCCESS","GET_ISSUES_ERROR","dispatch","type","issuesService","then","response","ok","json","catch","error","Issue","number","state","user","created_at","timeCreatedUntilNow","moment","from","openedByText","login","react_default","a","createElement","className","styles","index_es","icon","color","IssuesList","_React$Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","issues","props","issuesList","map","issue","components_issue","assign","id","React","Component","connect","getIssuesInProgress","getIssuesError","bindActionCreators","library","add","faComment","faBoxOpen","App","issues_list","initialState","getIssuesErrorMessage","undefined","length","action","rootReducer","combineReducers","Boolean","window","location","hostname","match","store","preloadedState","middlewares","thunkMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","configureStore","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2fb84b0c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2OKFt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"issue_container__3IYuO\",\"content\":\"issue_content__DgV_7\",\"stateIcon\":\"issue_stateIcon__3zMN7\",\"text\":\"issue_text__3akDe\",\"title\":\"issue_title__2OkjP\",\"comments\":\"issue_comments__1oJlr\",\"commentIcon\":\"issue_commentIcon__3ZCOS\"};","const domain = \"https://api.github.com/\";\n\nconst endpoints = {\n    getIssues: \"repos/facebook/react/issues\"\n};\n\nexport function getResponse({ method, actionKey }) {\n    const endpoint = `${domain}${endpoints[actionKey]}`;\n    const requestOptions = {\n        method,\n        cache: \"no-cache\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n\n    return fetch(endpoint, requestOptions);\n}\n","import { getResponse } from \"../utils/fetch-helper\";\n\nfunction getIssues() {\n    const options = {\n        method: \"GET\",\n        actionKey: \"getIssues\"\n    };\n    return getResponse(options);\n}\n\nexport { getIssues };\n","import * as issuesService from \"../services/issues-service\";\n\nexport const GET_ISSUES_IN_PROGRESS = \"GET_ISSUES_IN_PROGRESS\";\nexport const GET_ISSUES_SUCCESS = \"GET_ISSUES_SUCCESS\";\nexport const GET_ISSUES_ERROR = \"GET_ISSUES_ERROR\";\n\nexport function getIssues() {\n    return dispatch => {\n        dispatch({ type: GET_ISSUES_IN_PROGRESS });\n\n        return issuesService.getIssues().then(response => {\n            if (response.ok) {\n                response\n                    .json()\n                    .then(response => {\n                        dispatch({ type: GET_ISSUES_SUCCESS, response });\n                    })\n                    .catch(error => {\n                        dispatch({ type: GET_ISSUES_ERROR, error });\n                    });\n            } else {\n                dispatch({ type: GET_ISSUES_ERROR, error: \"An error occurred\" });\n            }\n        });\n    };\n}\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport styles from \"./issue.module.scss\";\nimport moment from \"moment\";\n\nconst Issue = ({ title, state, number, comments, user, created_at }) => {\n    const timeCreatedUntilNow = moment(created_at).from(moment());\n    const openedByText = `#${number} opened ${timeCreatedUntilNow} by ${user.login}`;\n    return (\n        <section className={styles.container}>\n            <div className={styles.stateIcon}>\n                <FontAwesomeIcon icon=\"box-open\" color=\"green\" />\n            </div>\n\n            <div className={styles.content}>\n                <div className={styles.title}>{title}</div>\n                <div className={styles.text}>{openedByText}</div>\n            </div>\n\n            <div className={styles.comments}>\n                <span className={styles.commentIcon}>\n                    <FontAwesomeIcon icon=\"comment\" color=\"lightblue\" />\n                </span>\n                {comments}\n            </div>\n        </section>\n    );\n};\n\nexport default Issue;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { getIssues } from \"../actions/issues-actions\";\nimport Issue from \"./issue\";\nimport styles from \"./issues-list.module.scss\";\n\nexport class IssuesList extends React.Component {\n    render() {\n        const issues = this.props.issuesList;\n        return (\n            <div className={styles.container}>\n                {issues &&\n                    issues.map(issue => {\n                        return <Issue {...issue} key={issue.id} />;\n                    })}\n            </div>\n        );\n    }\n\n    componentDidMount() {\n        this.props.getIssues();\n    }\n}\n\nconst mapStateToProps = state => ({\n    issuesList: state.issues.issuesList,\n    getIssuesInProgress: state.issues.getIssuesInProgress,\n    getIssuesError: state.issues.getIssuesError\n});\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators(\n        {\n            getIssues\n        },\n        dispatch\n    );\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(IssuesList);\n","import React, { Component } from \"react\";\nimport \"./styles/normalize.css\";\nimport styles from \"./App.module.scss\";\nimport IssuesList from \"./components/issues-list\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faComment, faBoxOpen } from \"@fortawesome/free-solid-svg-icons\";\n\nlibrary.add(faComment, faBoxOpen);\n\nclass App extends Component {\n    render() {\n        return (\n            <div className={styles.container}>\n                <header>\n                    <h1>React/Issues</h1>\n                    <p>A declarative, efficient, and flexible JavaScript library for building user interfaces.</p>\n                </header>\n                <IssuesList />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import { GET_ISSUES_IN_PROGRESS, GET_ISSUES_SUCCESS, GET_ISSUES_ERROR } from \"../actions/issues-actions\";\n\nexport const initialState = {\n    getIssuesInProgress: false,\n    issuesList: [],\n    getIssuesError: false,\n    getIssuesErrorMessage: undefined\n};\n\nfunction issues(state = initialState, action = {}) {\n    switch (action.type) {\n        case GET_ISSUES_IN_PROGRESS:\n            return Object.assign({}, state, initialState, {\n                getIssuesInProgress: true,\n                getIssuesError: false,\n                getIssuesErrorMessage: undefined\n            });\n        case GET_ISSUES_SUCCESS:\n            return Object.assign({}, state, {\n                getIssuesInProgress: false,\n                getIssuesError: false,\n                getIssuesErrorMessage: undefined,\n                issuesList: action.response\n            });\n        case GET_ISSUES_ERROR:\n            return Object.assign({}, state, initialState, {\n                getIssuesInProgress: false,\n                getIssuesError: true,\n                getIssuesErrorMessage: action.error\n            });\n        default:\n            return state;\n    }\n}\n\nexport default issues;\n","import { combineReducers } from \"redux\";\nimport issues from \"./issues-reducer\";\n\nconst rootReducer = combineReducers({\n    issues\n});\n\nexport default rootReducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\"No internet connection found. App is running in offline mode.\");\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./utils/configureStore\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = configureStore();\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { applyMiddleware, createStore } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport rootReducer from \"../reducers/index\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nexport default function configureStore(preloadedState) {\n    const middlewares = [thunkMiddleware];\n    const middlewareEnhancer = applyMiddleware(...middlewares);\n    const enhancers = [middlewareEnhancer];\n    const composedEnhancers = composeWithDevTools(...enhancers);\n    const store = createStore(rootReducer, preloadedState, composedEnhancers);\n\n    if (process.env.NODE_ENV !== \"production\" && module.hot) {\n        module.hot.accept(\"../reducers\", () => store.replaceReducer(rootReducer));\n    }\n\n    return store;\n}\n"],"sourceRoot":""}